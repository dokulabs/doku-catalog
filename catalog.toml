# Doku Service Catalog
version = "1.1.0"

# PostgreSQL
[services.postgres]
name = "PostgreSQL"
description = "Advanced open-source relational database with excellent performance"
category = "database"
icon = "üêò"
tags = ["database", "sql", "relational"]

[services.postgres.links]
homepage = "https://www.postgresql.org"
documentation = "https://www.postgresql.org/docs/"
repository = "https://github.com/postgres/postgres"

[services.postgres.versions."17"]
image = "postgres:17-alpine"
description = "PostgreSQL 17 - Latest release"
port = 5432
protocol = "tcp"
volumes = ["/var/lib/postgresql/data"]

[services.postgres.versions."17".environment]
POSTGRES_USER = "postgres"
POSTGRES_PASSWORD = "postgres"
POSTGRES_DB = "myapp"

[services.postgres.versions."17".healthcheck]
test = ["CMD-SHELL", "pg_isready -U postgres"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "10s"

[services.postgres.versions."17".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "2.0"

[services.postgres.versions."16"]
image = "postgres:16-alpine"
description = "PostgreSQL 16"
port = 5432
protocol = "tcp"
volumes = ["/var/lib/postgresql/data"]

[services.postgres.versions."16".environment]
POSTGRES_USER = "postgres"
POSTGRES_PASSWORD = "postgres"
POSTGRES_DB = "myapp"

[services.postgres.versions."16".healthcheck]
test = ["CMD-SHELL", "pg_isready -U postgres"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "10s"

[services.postgres.versions."16".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "2.0"

[services.postgres.versions."15"]
image = "postgres:15-alpine"
description = "PostgreSQL 15"
port = 5432
protocol = "tcp"
volumes = ["/var/lib/postgresql/data"]

[services.postgres.versions."15".environment]
POSTGRES_USER = "postgres"
POSTGRES_PASSWORD = "postgres"
POSTGRES_DB = "myapp"

[services.postgres.versions."15".healthcheck]
test = ["CMD-SHELL", "pg_isready -U postgres"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "10s"

[services.postgres.versions."15".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "2.0"

# MySQL
[services.mysql]
name = "MySQL"
description = "Popular open-source relational database"
category = "database"
icon = "üê¨"
tags = ["database", "sql", "relational"]

[services.mysql.links]
homepage = "https://www.mysql.com"
documentation = "https://dev.mysql.com/doc/"
repository = "https://github.com/mysql/mysql-server"

[services.mysql.versions."8.0"]
image = "mysql:8.0"
description = "MySQL 8.0"
port = 3306
protocol = "tcp"
volumes = ["/var/lib/mysql"]

[services.mysql.versions."8.0".environment]
MYSQL_ROOT_PASSWORD = "root"
MYSQL_DATABASE = "myapp"
MYSQL_USER = "user"
MYSQL_PASSWORD = "password"

[services.mysql.versions."8.0".healthcheck]
test = ["CMD", "mysqladmin", "ping", "-h", "localhost"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "30s"

[services.mysql.versions."8.0".resources]
memory_min = "512m"
memory_max = "2g"
cpu_min = "0.5"
cpu_max = "2.0"

# Redis
[services.redis]
name = "Redis"
description = "In-memory data structure store"
category = "cache"
icon = "üî¥"
tags = ["cache", "key-value", "redis"]

[services.redis.links]
homepage = "https://redis.io"
documentation = "https://redis.io/docs/"
repository = "https://github.com/redis/redis"

[services.redis.versions."7.2"]
image = "redis:7.2-alpine"
description = "Redis 7.2"
port = 6379
protocol = "tcp"

[services.redis.versions."7.2".healthcheck]
test = ["CMD", "redis-cli", "ping"]
interval = "5s"
timeout = "3s"
retries = 5
start_period = "5s"

[services.redis.versions."7.2".resources]
memory_min = "128m"
memory_max = "512m"
cpu_min = "0.25"
cpu_max = "1.0"

# MongoDB
[services.mongodb]
name = "MongoDB"
description = "NoSQL document database"
category = "database"
icon = "üçÉ"
tags = ["database", "nosql", "document"]

[services.mongodb.links]
homepage = "https://www.mongodb.com"
documentation = "https://docs.mongodb.com"
repository = "https://github.com/mongodb/mongo"

[services.mongodb.versions."7.0"]
image = "mongo:7.0"
description = "MongoDB 7.0"
port = 27017
protocol = "tcp"
volumes = ["/data/db"]

[services.mongodb.versions."7.0".environment]
MONGO_INITDB_ROOT_USERNAME = "admin"
MONGO_INITDB_ROOT_PASSWORD = "admin"

[services.mongodb.versions."7.0".healthcheck]
test = ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "20s"

[services.mongodb.versions."7.0".resources]
memory_min = "512m"
memory_max = "2g"
cpu_min = "0.5"
cpu_max = "2.0"

# RabbitMQ
[services.rabbitmq]
name = "RabbitMQ"
description = "Message broker with management UI"
category = "queue"
icon = "üê∞"
tags = ["queue", "message-broker", "amqp"]

[services.rabbitmq.links]
homepage = "https://www.rabbitmq.com"
documentation = "https://www.rabbitmq.com/documentation.html"
repository = "https://github.com/rabbitmq/rabbitmq-server"

[services.rabbitmq.versions."3.12"]
image = "rabbitmq:3.12-management-alpine"
description = "RabbitMQ 3.12 with management"
port = 5672
admin_port = 15672
protocol = "tcp"
volumes = ["/var/lib/rabbitmq"]

[services.rabbitmq.versions."3.12".environment]
RABBITMQ_DEFAULT_USER = "guest"
RABBITMQ_DEFAULT_PASS = "guest"

[services.rabbitmq.versions."3.12".healthcheck]
test = ["CMD", "rabbitmq-diagnostics", "ping"]
interval = "30s"
timeout = "10s"
retries = 5
start_period = "30s"

[services.rabbitmq.versions."3.12".resources]
memory_min = "512m"
memory_max = "1g"
cpu_min = "0.5"
cpu_max = "1.5"

# Nginx
[services.nginx]
name = "Nginx"
description = "High-performance HTTP server"
category = "webserver"
icon = "üåê"
tags = ["webserver", "proxy", "http"]

[services.nginx.links]
homepage = "https://nginx.org"
documentation = "https://nginx.org/en/docs/"
repository = "https://github.com/nginx/nginx"

[services.nginx.versions."1.25"]
image = "nginx:1.25-alpine"
description = "Nginx 1.25"
port = 80
protocol = "http"
volumes = ["/usr/share/nginx/html"]

[services.nginx.versions."1.25".healthcheck]
test = ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/ || exit 1"]
interval = "10s"
timeout = "5s"
retries = 3
start_period = "5s"

[services.nginx.versions."1.25".resources]
memory_min = "64m"
memory_max = "256m"
cpu_min = "0.1"
cpu_max = "0.5"

# MailHog
[services.mailhog]
name = "MailHog"
description = "Email testing tool"
category = "development"
icon = "üìß"
tags = ["email", "smtp", "testing"]

[services.mailhog.links]
homepage = "https://github.com/mailhog/MailHog"
documentation = "https://github.com/mailhog/MailHog"
repository = "https://github.com/mailhog/MailHog"

[services.mailhog.versions."latest"]
image = "mailhog/mailhog:latest"
description = "MailHog email testing"
port = 1025
admin_port = 8025
protocol = "tcp"

[services.mailhog.versions."latest".resources]
memory_min = "64m"
memory_max = "256m"
cpu_min = "0.1"
cpu_max = "0.5"

# Adminer
[services.adminer]
name = "Adminer"
description = "Database management tool"
category = "development"
icon = "üóÑÔ∏è"
tags = ["database", "admin", "mysql", "postgres"]

[services.adminer.links]
homepage = "https://www.adminer.org"
documentation = "https://www.adminer.org"
repository = "https://github.com/vrana/adminer"

[services.adminer.versions."latest"]
image = "adminer:latest"
description = "Adminer database tool"
port = 8080
protocol = "http"

[services.adminer.versions."latest".resources]
memory_min = "128m"
memory_max = "256m"
cpu_min = "0.1"
cpu_max = "0.5"

# Elasticsearch
[services.elasticsearch]
name = "Elasticsearch"
description = "Distributed search and analytics engine"
category = "search"
icon = "üîç"
tags = ["search", "analytics", "elasticsearch"]

[services.elasticsearch.links]
homepage = "https://www.elastic.co/elasticsearch"
documentation = "https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"
repository = "https://github.com/elastic/elasticsearch"

[services.elasticsearch.versions."8.11"]
image = "elasticsearch:8.11.0"
description = "Elasticsearch 8.11"
port = 9200
protocol = "http"
volumes = ["/usr/share/elasticsearch/data"]

[services.elasticsearch.versions."8.11".environment]
discovery.type = "single-node"
xpack.security.enabled = "false"
ES_JAVA_OPTS = "-Xms512m -Xmx512m"

[services.elasticsearch.versions."8.11".healthcheck]
test = ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
interval = "30s"
timeout = "10s"
retries = 5
start_period = "60s"

[services.elasticsearch.versions."8.11".resources]
memory_min = "1g"
memory_max = "4g"
cpu_min = "0.5"
cpu_max = "2.0"

# MariaDB
[services.mariadb]
name = "MariaDB"
description = "MySQL-compatible relational database"
category = "database"
icon = "üê¨"
tags = ["database", "sql", "mariadb", "mysql-compatible"]

[services.mariadb.links]
homepage = "https://mariadb.org"
documentation = "https://mariadb.com/kb/en/"
repository = "https://github.com/MariaDB/server"

[services.mariadb.versions."11.2"]
image = "mariadb:11.2"
description = "MariaDB 11.2"
port = 3306
protocol = "tcp"
volumes = ["/var/lib/mysql"]

[services.mariadb.versions."11.2".environment]
MARIADB_ROOT_PASSWORD = "root"
MARIADB_DATABASE = "myapp"
MARIADB_USER = "user"
MARIADB_PASSWORD = "password"

[services.mariadb.versions."11.2".healthcheck]
test = ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "30s"

[services.mariadb.versions."11.2".resources]
memory_min = "512m"
memory_max = "2g"
cpu_min = "0.5"
cpu_max = "2.0"

# Memcached
[services.memcached]
name = "Memcached"
description = "High-performance distributed memory caching"
category = "cache"
icon = "üíæ"
tags = ["cache", "memory", "key-value"]

[services.memcached.links]
homepage = "https://memcached.org"
documentation = "https://github.com/memcached/memcached/wiki"
repository = "https://github.com/memcached/memcached"

[services.memcached.versions."1.6"]
image = "memcached:1.6-alpine"
description = "Memcached 1.6"
port = 11211
protocol = "tcp"

[services.memcached.versions."1.6".resources]
memory_min = "64m"
memory_max = "512m"
cpu_min = "0.1"
cpu_max = "1.0"

# Apache Kafka
[services.kafka]
name = "Apache Kafka"
description = "Distributed event streaming platform"
category = "queue"
icon = "üì®"
tags = ["queue", "streaming", "kafka", "events"]

[services.kafka.links]
homepage = "https://kafka.apache.org"
documentation = "https://kafka.apache.org/documentation/"
repository = "https://github.com/apache/kafka"

[services.kafka.versions."3.6"]
image = "apache/kafka:3.6.1"
description = "Apache Kafka 3.6"
port = 9092
protocol = "tcp"
volumes = ["/var/lib/kafka/data"]

[services.kafka.versions."3.6".environment]
KAFKA_NODE_ID = "1"
KAFKA_PROCESS_ROLES = "broker,controller"
KAFKA_LISTENERS = "PLAINTEXT://0.0.0.0:9092,CONTROLLER://localhost:9093"
KAFKA_ADVERTISED_LISTENERS = "PLAINTEXT://localhost:9092"
KAFKA_CONTROLLER_LISTENER_NAMES = "CONTROLLER"
KAFKA_LISTENER_SECURITY_PROTOCOL_MAP = "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
KAFKA_CONTROLLER_QUORUM_VOTERS = "1@localhost:9093"
KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR = "1"
KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR = "1"
KAFKA_TRANSACTION_STATE_LOG_MIN_ISR = "1"
KAFKA_LOG_DIRS = "/var/lib/kafka/data"
CLUSTER_ID = "MkU3OEVBNTcwNTJENDM2Qk"

[services.kafka.versions."3.6".resources]
memory_min = "512m"
memory_max = "2g"
cpu_min = "0.5"
cpu_max = "2.0"

# Minio
[services.minio]
name = "MinIO"
description = "S3-compatible object storage"
category = "storage"
icon = "üóÑÔ∏è"
tags = ["storage", "s3", "object-storage"]

[services.minio.links]
homepage = "https://min.io"
documentation = "https://min.io/docs/"
repository = "https://github.com/minio/minio"

[services.minio.versions."latest"]
image = "minio/minio:latest"
description = "MinIO S3-compatible storage"
port = 9000
admin_port = 9001
protocol = "http"
volumes = ["/data"]
command = ["server", "/data", "--console-address", ":9001"]

[services.minio.versions."latest".environment]
MINIO_ROOT_USER = "minioadmin"
MINIO_ROOT_PASSWORD = "minioadmin"

[services.minio.versions."latest".healthcheck]
test = ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
interval = "30s"
timeout = "10s"
retries = 3
start_period = "30s"

[services.minio.versions."latest".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "1.0"

# Grafana
[services.grafana]
name = "Grafana"
description = "Analytics and monitoring visualization"
category = "monitoring"
icon = "üìä"
tags = ["monitoring", "visualization", "metrics"]

[services.grafana.links]
homepage = "https://grafana.com"
documentation = "https://grafana.com/docs/"
repository = "https://github.com/grafana/grafana"

[services.grafana.versions."10.2"]
image = "grafana/grafana:10.2.0"
description = "Grafana 10.2"
port = 3000
protocol = "http"
volumes = ["/var/lib/grafana"]

[services.grafana.versions."10.2".environment]
GF_SECURITY_ADMIN_USER = "admin"
GF_SECURITY_ADMIN_PASSWORD = "admin"
GF_USERS_ALLOW_SIGN_UP = "false"

[services.grafana.versions."10.2".healthcheck]
test = ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "30s"

[services.grafana.versions."10.2".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "1.0"

# Prometheus
[services.prometheus]
name = "Prometheus"
description = "Monitoring system and time series database"
category = "monitoring"
icon = "üî•"
tags = ["monitoring", "metrics", "prometheus"]

[services.prometheus.links]
homepage = "https://prometheus.io"
documentation = "https://prometheus.io/docs/"
repository = "https://github.com/prometheus/prometheus"

[services.prometheus.versions."2.48"]
image = "prom/prometheus:v2.48.0"
description = "Prometheus 2.48"
port = 9090
protocol = "http"
volumes = ["/prometheus"]

[services.prometheus.versions."2.48".healthcheck]
test = ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
interval = "10s"
timeout = "5s"
retries = 3
start_period = "10s"

[services.prometheus.versions."2.48".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "1.0"

# phpMyAdmin
[services.phpmyadmin]
name = "phpMyAdmin"
description = "MySQL/MariaDB administration tool"
category = "development"
icon = "üêò"
tags = ["database", "admin", "mysql", "mariadb", "php"]

[services.phpmyadmin.links]
homepage = "https://www.phpmyadmin.net"
documentation = "https://docs.phpmyadmin.net/"
repository = "https://github.com/phpmyadmin/phpmyadmin"

[services.phpmyadmin.versions."latest"]
image = "phpmyadmin:latest"
description = "phpMyAdmin for MySQL/MariaDB"
port = 80
protocol = "http"

[services.phpmyadmin.versions."latest".environment]
PMA_ARBITRARY = "1"
PMA_HOST = ""
PMA_PORT = ""

[services.phpmyadmin.versions."latest".resources]
memory_min = "128m"
memory_max = "512m"
cpu_min = "0.1"
cpu_max = "0.5"

# Jaeger
[services.jaeger]
name = "Jaeger"
description = "Distributed tracing platform"
category = "monitoring"
icon = "üî≠"
tags = ["tracing", "monitoring", "observability"]

[services.jaeger.links]
homepage = "https://www.jaegertracing.io"
documentation = "https://www.jaegertracing.io/docs/"
repository = "https://github.com/jaegertracing/jaeger"

[services.jaeger.versions."1.52"]
image = "jaegertracing/all-in-one:1.52"
description = "Jaeger all-in-one 1.52"
port = 16686
admin_port = 14268
protocol = "http"

[services.jaeger.versions."1.52".environment]
COLLECTOR_OTLP_ENABLED = "true"

[services.jaeger.versions."1.52".healthcheck]
test = ["CMD-SHELL", "wget --spider -q http://localhost:14269/ || exit 1"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "10s"

[services.jaeger.versions."1.52".resources]
memory_min = "256m"
memory_max = "1g"
cpu_min = "0.25"
cpu_max = "1.0"

# LocalStack
[services.localstack]
name = "LocalStack"
description = "Local AWS cloud stack for development"
category = "development"
icon = "‚òÅÔ∏è"
tags = ["aws", "cloud", "development", "testing"]

[services.localstack.links]
homepage = "https://localstack.cloud"
documentation = "https://docs.localstack.cloud"
repository = "https://github.com/localstack/localstack"

[services.localstack.versions."3.0"]
image = "localstack/localstack:3.0"
description = "LocalStack 3.0 - AWS services locally"
port = 4566
protocol = "http"
volumes = ["/var/lib/localstack", "/var/run/docker.sock:/var/run/docker.sock"]

[services.localstack.versions."3.0".environment]
SERVICES = "s3,dynamodb,sqs,sns,lambda,kinesis,cloudwatch"
DEBUG = "0"
AWS_DEFAULT_REGION = "us-east-1"

[services.localstack.versions."3.0".healthcheck]
test = ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
interval = "10s"
timeout = "5s"
retries = 5
start_period = "30s"

[services.localstack.versions."3.0".resources]
memory_min = "512m"
memory_max = "2g"
cpu_min = "0.5"
cpu_max = "2.0"

# Vault
[services.vault]
name = "HashiCorp Vault"
description = "Secrets management and encryption"
category = "security"
icon = "üîê"
tags = ["secrets", "security", "encryption", "vault"]

[services.vault.links]
homepage = "https://www.vaultproject.io"
documentation = "https://developer.hashicorp.com/vault/docs"
repository = "https://github.com/hashicorp/vault"

[services.vault.versions."1.15"]
image = "hashicorp/vault:1.15"
description = "HashiCorp Vault 1.15"
port = 8200
protocol = "http"
volumes = ["/vault/file"]
command = ["vault", "server", "-dev", "-dev-listen-address=0.0.0.0:8200"]

[services.vault.versions."1.15".environment]
VAULT_DEV_ROOT_TOKEN_ID = "root"
VAULT_DEV_LISTEN_ADDRESS = "0.0.0.0:8200"

[services.vault.versions."1.15".healthcheck]
test = ["CMD", "vault", "status"]
interval = "10s"
timeout = "5s"
retries = 3
start_period = "10s"

[services.vault.versions."1.15".resources]
memory_min = "128m"
memory_max = "512m"
cpu_min = "0.1"
cpu_max = "0.5"
